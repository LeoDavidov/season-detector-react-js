{"version":3,"sources":["components/SeasonDisplay.js","components/Loader.js","components/ErrorMessage.js","App.js","index.js"],"names":["seasonConfig","summer","text","iconName","winter","SeasonDisplay","props","lat","month","season","Date","getMonth","className","Loader","children","defaultProps","ErrorMessage","App","state","errorMessage","this","conditionRender","window","navigator","geolocation","getCurrentPosition","position","setState","coords","latitude","err","message","React","Component","ReactDOM","render","document","getElementById"],"mappings":"uOAGMA,EAAe,CACjBC,OAAQ,CACJC,KAAM,wBACNC,SAAU,OAEdC,OAAQ,CACJF,KAAM,oBACNC,SAAU,cA0BHE,EAZO,SAACC,GACnB,IAVeC,EAAKC,EAUdC,GAVSF,EAUUD,EAAMC,IAVXC,GAUgB,IAAIE,MAAOC,WAT3CJ,EAAM,EACCC,EAAQ,GAAKA,EAAQ,EAAI,SAAW,SAEpCA,EAAQ,GAAKA,EAAQ,EAAI,SAAW,UAO/C,EAA2BR,EAAaS,GAAhCP,EAAR,EAAQA,KAAMC,EAAd,EAAcA,SACd,OACI,sBAAKS,UAAS,yBAAoBH,GAAlC,UACI,mBAAGG,UAAS,4BAAuBT,EAAvB,WACZ,6BAAKD,IACL,mBAAGU,UAAS,6BAAwBT,EAAxB,eC7BlBU,EAAS,SAACP,GACZ,OACI,qBAAKM,UAAU,mBAAf,SACI,qBAAKA,UAAU,sBAAf,SAAsCN,EAAMQ,cAKxDD,EAAOE,aAAe,CAClBD,SAAU,cAGCD,QCXTG,G,MAAe,SAACV,GAClB,OACI,qBAAKM,UAAU,gBAAf,SACI,6BAAKN,EAAMQ,eAKvBE,EAAaD,aAAe,CACxBD,SAAU,qBAGCE,QCeAC,E,4MAxBXC,MAAQ,CAAEX,IAAK,KAAMY,aAAc,I,qDAGnC,WACI,OAAIC,KAAKF,MAAMX,IAAY,cAAC,EAAD,CAAeA,IAAKa,KAAKF,MAAMX,MACtDa,KAAKF,MAAMC,aAEP,eAAC,EAAD,qBAAsBC,KAAKF,MAAMC,gBAElC,cAAC,EAAD,sD,oBAGX,WACI,OAAO,8BAAMC,KAAKC,sB,+BAGtB,WAAqB,IAAD,OAChBC,OAAOC,UAAUC,YAAYC,oBACzB,SAACC,GAAD,OAAc,EAAKC,SAAS,CAAEpB,IAAKmB,EAASE,OAAOC,cACnD,SAACC,GAAD,OAAS,EAAKH,SAAS,CAAER,aAAcW,EAAIC,iB,GApBrCC,IAAMC,WCFxBC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.30de5b57.chunk.js","sourcesContent":["import React from 'react';\r\nimport './SeasonDisplay.css';\r\n\r\nconst seasonConfig = {\r\n    summer: {\r\n        text: \"Let's go to the beach\",\r\n        iconName: 'sun',\r\n    },\r\n    winter: {\r\n        text: 'Burr, its Chilly!',\r\n        iconName: 'snowflake',\r\n    },\r\n};\r\n\r\n// Helper f\r\nconst getSeason = (lat, month) => {\r\n    if (lat > 0) {\r\n        return month > 2 && month < 9 ? 'summer' : 'winter';\r\n    } else {\r\n        return month > 2 && month < 9 ? 'winter' : 'summer';\r\n    }\r\n};\r\n\r\n// SeasonDisplay - component f\r\nconst SeasonDisplay = (props) => {\r\n    const season = getSeason(props.lat, new Date().getMonth());\r\n    const { text, iconName } = seasonConfig[season];\r\n    return (\r\n        <div className={`season-display ${season}`}>\r\n            <i className={`icon-left massive ${iconName} icon`} />\r\n            <h1>{text}</h1>\r\n            <i className={`icon-right massive ${iconName} icon`} />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SeasonDisplay;\r\n","import React from 'react';\r\n\r\nconst Loader = (props) => {\r\n    return (\r\n        <div className=\"ui active dimmer\">\r\n            <div className=\"ui huge text loader\">{props.children}</div>\r\n        </div>\r\n    );\r\n};\r\n\r\nLoader.defaultProps = {\r\n    children: 'Waiting...',\r\n};\r\n\r\nexport default Loader;\r\n","import React from 'react';\r\nimport './ErrorMessage.css';\r\n\r\nconst ErrorMessage = (props) => {\r\n    return (\r\n        <div className=\"error-message\">\r\n            <h1>{props.children}</h1>\r\n        </div>\r\n    );\r\n};\r\n\r\nErrorMessage.defaultProps = {\r\n    children: 'Error. Try again.',\r\n};\r\n\r\nexport default ErrorMessage;\r\n","import React from 'react';\r\nimport SeasonDisplay from './components/SeasonDisplay';\r\nimport Loader from './components/Loader';\r\nimport ErrorMessage from './components/ErrorMessage';\r\n\r\nclass App extends React.Component {\r\n    state = { lat: null, errorMessage: '' };\r\n\r\n    // Helper method\r\n    conditionRender() {\r\n        if (this.state.lat) return <SeasonDisplay lat={this.state.lat} />;\r\n        if (this.state.errorMessage)\r\n            return (\r\n                <ErrorMessage>Error: {this.state.errorMessage}</ErrorMessage>\r\n            );\r\n        return <Loader>Please accept the location request...</Loader>;\r\n    }\r\n\r\n    render() {\r\n        return <div>{this.conditionRender()}</div>;\r\n    }\r\n\r\n    componentDidMount() {\r\n        window.navigator.geolocation.getCurrentPosition(\r\n            (position) => this.setState({ lat: position.coords.latitude }),\r\n            (err) => this.setState({ errorMessage: err.message })\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","import ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}